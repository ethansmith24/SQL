/* In this project I downloaded Spotify data from Kaggle, created a table to insert the data into and used SQL to analyze the data. */ 

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

/* How many songs does each artist have and what is their average song length? */
SELECT artist_name, COUNT(track_id) AS songs, AVG(duration_ms) AS "average song length (ms)" FROM bit_db.spotifydata
GROUP BY artist_name ORDER BY songs asc;

/* How many artists have more than 1 song? */
SELECT artist_name, COUNT(track_id) AS songs FROM bit_db.spotifydata GROUP BY artist_name HAVING songs>1 ORDER BY songs asc;

/* Which 5 artists have the most popular songs and how many songs do they have? */
SELECT artist_name, MAX(popularity) AS popularity, COUNT(track_id) AS songs FROM bit_db.spotifydata GROUP BY artist_name ORDER BY popularity desc LIMIT 5;

/* Which 10 songs have the least danceability and who are the corresponding artists? */
SELECT track_name, danceability, artist_name FROM bit_db.spotifydata GROUP BY track_name ORDER BY danceability asc LIMIT 10;

/* What songs fall into the following categories based on popularity: A: 100 - 90, B: 89 - 80, C: 79 - 70, D: 69 - 60, F: 59 and below */
SELECT track_name AS songs, popularity, CASE 
WHEN popularity > 89 THEN "A"
WHEN popularity > 79 THEN "B"
WHEN popularity > 69 THEN "C"
WHEN popularity > 59 THEN "D"
ELSE "F" END AS "popularity grade" FROM bit_db.spotifydata ORDER BY popularity desc;

/* How many songs fall into each popularity grade? */
SELECT COUNT(track_id) AS songs, CASE 
WHEN popularity > 89 THEN "A"
WHEN popularity > 79 THEN "B"
WHEN popularity > 69 THEN "C"
WHEN popularity > 59 THEN "D"
ELSE "F" END AS "popularity grade" FROM bit_db.spotifydata GROUP BY "popularity grade" ORDER BY popularity desc;

/* Which songs have at least B-level popularity and what is their energy, loudness and tempo? */
SELECT track_name AS songs, CASE 
WHEN popularity > 89 THEN "A"
WHEN popularity > 79 THEN "B"
END AS "popularity grade", energy, loudness, tempo FROM bit_db.spotifydata WHERE popularity>79 ORDER BY popularity desc;

/* What are the slowest songs and their corresponding popularity? */
SELECT track_name AS songs, tempo, popularity FROM bit_db.spotifydata ORDER BY tempo asc;

/* Which songs are the most appealing in terms of popularity, danceability and energy? */
SELECT track_name AS songs, SUM("popularity" + "danceability" + "energy") AS "song appeal" FROM bit_db.spotifydata GROUP BY songs ORDER BY "song appeal" desc;

/* How many songs are faster the average tempo? */
SELECT COUNT(track_name) AS songs FROM bit_db.spotifydata WHERE tempo> (SELECT AVG(tempo) FROM bit_db.spotifydata);

/* Which songs are shorter the average duration? */
SELECT track_name AS songs, duration_ms AS "duration (ms)" FROM bit_db.spotifydata WHERE duration_ms< (SELECT AVG(duration_ms) FROM bit_db.spotifydata);


